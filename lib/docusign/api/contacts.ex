# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.Contacts do
  @moduledoc """
  API calls for all endpoints tagged `Contacts`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Deletes a contact.
  This method deletes a contact associated with an account.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - contact_id (String.t): The id of a contact person in the account&#39;s address book.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.ContactUpdateResponse{}} on success
  {:error, info} on failure
  """
  @spec contacts_delete_contact_with_id(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.ContactUpdateResponse.t()} | {:error, Tesla.Env.t()}
  def contacts_delete_contact_with_id(connection, account_id, contact_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/v2.1/accounts/#{account_id}/contacts/#{contact_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ContactUpdateResponse{})
  end

  @doc """
  Deletes multiple contacts from an account.
  This method deletes multiple contacts associated with an account.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters
    - :contact_mod_request (ContactModRequest):

  ## Returns

  {:ok, %DocuSign.Model.ContactUpdateResponse{}} on success
  {:error, info} on failure
  """
  @spec contacts_delete_contacts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.ContactUpdateResponse.t()} | {:error, Tesla.Env.t()}
  def contacts_delete_contacts(connection, account_id, opts \\ []) do
    optional_params = %{
      :contactModRequest => :body
    }

    %{}
    |> method(:delete)
    |> url("/v2.1/accounts/#{account_id}/contacts")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ContactUpdateResponse{})
  end

  @doc """
  Gets one or more contacts.
  This method returns one or more contacts associated with a DocuSign account. You can also retrieve contacts from connected [cloud storage][CloudStorage] providers by using the &#x60;cloud_provider&#x60; query parameter. By default, contacts are retrieved from the DocuSign account&#39;s default address book.  To return a specific contact, use the &#x60;contactId&#x60; query parameter. To return all contacts associated with an account, omit this parameter.  [CloudStorage]: https://developers.docusign.com/docs/esign-rest-api/reference/CloudStorage

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - contact_id (String.t): The id of a contact person in the account&#39;s address book.
  - opts (KeywordList): [optional] Optional parameters
    - :cloud_provider (String.t): (Optional) The cloud provider from which to retrieve the contacts. Valid values are:  - &#x60;rooms&#x60; - &#x60;docusignCore&#x60; (default)

  ## Returns

  {:ok, %DocuSign.Model.ContactGetResponse{}} on success
  {:error, info} on failure
  """
  @spec contacts_get_contact_by_id(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.ContactGetResponse.t()} | {:error, Tesla.Env.t()}
  def contacts_get_contact_by_id(connection, account_id, contact_id, opts \\ []) do
    optional_params = %{
      :cloud_provider => :query
    }

    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/contacts/#{contact_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ContactGetResponse{})
  end

  @doc """
  Imports new contacts into a contacts list.
  This method imports multiple new contacts into a contact list from a CSV, JSON, or XML file.  To use this method, you must provide a request body in one of the supported formats and include a &#x60;content-type&#x60; header with the appropriate value.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters
    - :contact_mod_request (ContactModRequest):

  ## Returns

  {:ok, %DocuSign.Model.ContactUpdateResponse{}} on success
  {:error, info} on failure
  """
  @spec contacts_post_contacts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.ContactUpdateResponse.t()} | {:error, Tesla.Env.t()}
  def contacts_post_contacts(connection, account_id, opts \\ []) do
    optional_params = %{
      :contactModRequest => :body
    }

    %{}
    |> method(:post)
    |> url("/v2.1/accounts/#{account_id}/contacts")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ContactUpdateResponse{})
  end

  @doc """
  Updates one or more contacts.
  This method updates one or more contacts associated with an account.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters
    - :contact_mod_request (ContactModRequest):

  ## Returns

  {:ok, %DocuSign.Model.ContactUpdateResponse{}} on success
  {:error, info} on failure
  """
  @spec contacts_put_contacts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.ContactUpdateResponse.t()} | {:error, Tesla.Env.t()}
  def contacts_put_contacts(connection, account_id, opts \\ []) do
    optional_params = %{
      :contactModRequest => :body
    }

    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/contacts")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ContactUpdateResponse{})
  end
end
