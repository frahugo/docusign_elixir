# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.EnvelopeTemplates do
  @moduledoc """
  API calls for all endpoints tagged `EnvelopeTemplates`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Deletes a template from a document in an existing envelope.
  Deletes the specified template from a document in an existing envelope.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - document_id (String.t): The &#x60;documentId&#x60; is set by the API client. It is an integer that falls between &#x60;1&#x60; and 2,147,483,647. The value is encoded as a string without commas. The values &#x60;1&#x60;, &#x60;2&#x60;, &#x60;3&#x60;, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a &#x60;documentId&#x60; property that specifies the document on which to place the tab.
  - envelope_id (String.t): The envelope&#39;s GUID.   Example: &#x60;93be49ab-xxxx-xxxx-xxxx-f752070d71ec&#x60;
  - template_id (String.t): The id of the template.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec templates_delete_document_templates(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def templates_delete_document_templates(
        connection,
        account_id,
        document_id,
        envelope_id,
        template_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url(
      "/v2.1/accounts/#{account_id}/envelopes/#{envelope_id}/documents/#{document_id}/templates/#{
        template_id
      }"
    )
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets the templates associated with a document in an existing envelope.
  Retrieves the templates associated with a document in the specified envelope.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - document_id (String.t): The &#x60;documentId&#x60; is set by the API client. It is an integer that falls between &#x60;1&#x60; and 2,147,483,647. The value is encoded as a string without commas. The values &#x60;1&#x60;, &#x60;2&#x60;, &#x60;3&#x60;, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a &#x60;documentId&#x60; property that specifies the document on which to place the tab.
  - envelope_id (String.t): The envelope&#39;s GUID.   Example: &#x60;93be49ab-xxxx-xxxx-xxxx-f752070d71ec&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :include (String.t): A comma-separated list that limits the results. Valid values are:  * &#x60;applied&#x60; * &#x60;matched&#x60;

  ## Returns

  {:ok, %DocuSign.Model.TemplateInformation{}} on success
  {:error, info} on failure
  """
  @spec templates_get_document_templates(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.TemplateInformation.t()} | {:error, Tesla.Env.t()}
  def templates_get_document_templates(
        connection,
        account_id,
        document_id,
        envelope_id,
        opts \\ []
      ) do
    optional_params = %{
      :include => :query
    }

    %{}
    |> method(:get)
    |> url(
      "/v2.1/accounts/#{account_id}/envelopes/#{envelope_id}/documents/#{document_id}/templates"
    )
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.TemplateInformation{})
  end

  @doc """
  Get List of Templates used in an Envelope
  This returns a list of the server-side templates, their name and ID, used in an envelope.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - envelope_id (String.t): The envelope&#39;s GUID.   Example: &#x60;93be49ab-xxxx-xxxx-xxxx-f752070d71ec&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :include (String.t): The possible value is &#x60;matching_applied&#x60;, which returns template matching information for the template.

  ## Returns

  {:ok, %DocuSign.Model.TemplateInformation{}} on success
  {:error, info} on failure
  """
  @spec templates_get_envelope_templates(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.TemplateInformation.t()} | {:error, Tesla.Env.t()}
  def templates_get_envelope_templates(connection, account_id, envelope_id, opts \\ []) do
    optional_params = %{
      :include => :query
    }

    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/envelopes/#{envelope_id}/templates")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.TemplateInformation{})
  end

  @doc """
  Adds templates to a document in an  envelope.
  Adds templates to a document in the specified envelope.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - document_id (String.t): The &#x60;documentId&#x60; is set by the API client. It is an integer that falls between &#x60;1&#x60; and 2,147,483,647. The value is encoded as a string without commas. The values &#x60;1&#x60;, &#x60;2&#x60;, &#x60;3&#x60;, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a &#x60;documentId&#x60; property that specifies the document on which to place the tab.
  - envelope_id (String.t): The envelope&#39;s GUID.   Example: &#x60;93be49ab-xxxx-xxxx-xxxx-f752070d71ec&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :preserve_template_recipient (String.t):
    - :document_template_list (DocumentTemplateList):

  ## Returns

  {:ok, %DocuSign.Model.DocumentTemplateList{}} on success
  {:error, info} on failure
  """
  @spec templates_post_document_templates(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.DocumentTemplateList.t()} | {:error, Tesla.Env.t()}
  def templates_post_document_templates(
        connection,
        account_id,
        document_id,
        envelope_id,
        opts \\ []
      ) do
    optional_params = %{
      :preserve_template_recipient => :query,
      :documentTemplateList => :body
    }

    %{}
    |> method(:post)
    |> url(
      "/v2.1/accounts/#{account_id}/envelopes/#{envelope_id}/documents/#{document_id}/templates"
    )
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.DocumentTemplateList{})
  end

  @doc """
  Adds templates to an envelope.
  Adds templates to the specified envelope.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - envelope_id (String.t): The envelope&#39;s GUID.   Example: &#x60;93be49ab-xxxx-xxxx-xxxx-f752070d71ec&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :preserve_template_recipient (String.t):
    - :document_template_list (DocumentTemplateList):

  ## Returns

  {:ok, %DocuSign.Model.DocumentTemplateList{}} on success
  {:error, info} on failure
  """
  @spec templates_post_envelope_templates(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.DocumentTemplateList.t()} | {:error, Tesla.Env.t()}
  def templates_post_envelope_templates(connection, account_id, envelope_id, opts \\ []) do
    optional_params = %{
      :preserve_template_recipient => :query,
      :documentTemplateList => :body
    }

    %{}
    |> method(:post)
    |> url("/v2.1/accounts/#{account_id}/envelopes/#{envelope_id}/templates")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.DocumentTemplateList{})
  end
end
