# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.EnvelopeWorkflowDefinition do
  @moduledoc """
  API calls for all endpoints tagged `EnvelopeWorkflowDefinition`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Deletes an envelope&#39;s workflow definition.
  Deletes the specified envelope&#39;s workflow definition if it has one.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - envelope_id (String.t): The envelope&#39;s GUID.   Example: &#x60;93be49ab-xxxx-xxxx-xxxx-f752070d71ec&#x60;
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec envelope_workflow_definition_delete_envelope_workflow_definition(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def envelope_workflow_definition_delete_envelope_workflow_definition(
        connection,
        account_id,
        envelope_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/v2.1/accounts/#{account_id}/envelopes/#{envelope_id}/workflow")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Deletes a template&#39;s workflow definition.
  Deletes the specified template&#39;s workflow definition if it has one.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - template_id (String.t): The id of the template.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec envelope_workflow_definition_delete_template_workflow_definition(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def envelope_workflow_definition_delete_template_workflow_definition(
        connection,
        account_id,
        template_id,
        _opts \\ []
      ) do
    %{}
    |> method(:delete)
    |> url("/v2.1/accounts/#{account_id}/templates/#{template_id}/workflow")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets an envelope&#39;s workflow definition.
  Returns an envelope&#39;s workflow definition if the envelope specified by &#x60;envelopeId&#x60; has one.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - envelope_id (String.t): The envelope&#39;s GUID.   Example: &#x60;93be49ab-xxxx-xxxx-xxxx-f752070d71ec&#x60;
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.Workflow{}} on success
  {:error, info} on failure
  """
  @spec envelope_workflow_definition_get_envelope_workflow_definition(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.Workflow.t()} | {:error, Tesla.Env.t()}
  def envelope_workflow_definition_get_envelope_workflow_definition(
        connection,
        account_id,
        envelope_id,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/envelopes/#{envelope_id}/workflow")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.Workflow{})
  end

  @doc """
  Gets template&#39;s workflow definition.
  Returns template&#39;s workflow definition if the template specified by &#x60;templateId&#x60; has one.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - template_id (String.t): The id of the template.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.Workflow{}} on success
  {:error, info} on failure
  """
  @spec envelope_workflow_definition_get_template_workflow_definition(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.Workflow.t()} | {:error, Tesla.Env.t()}
  def envelope_workflow_definition_get_template_workflow_definition(
        connection,
        account_id,
        template_id,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/templates/#{template_id}/workflow")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.Workflow{})
  end

  @doc """
  Updates an envelope&#39;s workflow definition.
  Updates the specified envelope&#39;s workflow definition if  it has one.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - envelope_id (String.t): The envelope&#39;s GUID.   Example: &#x60;93be49ab-xxxx-xxxx-xxxx-f752070d71ec&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :workflow (Workflow):

  ## Returns

  {:ok, %DocuSign.Model.Workflow{}} on success
  {:error, info} on failure
  """
  @spec envelope_workflow_definition_put_envelope_workflow_definition(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.Workflow.t()} | {:error, Tesla.Env.t()}
  def envelope_workflow_definition_put_envelope_workflow_definition(
        connection,
        account_id,
        envelope_id,
        opts \\ []
      ) do
    optional_params = %{
      :workflow => :body
    }

    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/envelopes/#{envelope_id}/workflow")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.Workflow{})
  end

  @doc """
  Update a template&#39;s workflow definiton.
  Updates the specified template&#39;s workflow definition if  it has one.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - template_id (String.t): The id of the template.
  - opts (KeywordList): [optional] Optional parameters
    - :workflow (Workflow):

  ## Returns

  {:ok, %DocuSign.Model.Workflow{}} on success
  {:error, info} on failure
  """
  @spec envelope_workflow_definition_put_template_workflow_definition(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.Workflow.t()} | {:error, Tesla.Env.t()}
  def envelope_workflow_definition_put_template_workflow_definition(
        connection,
        account_id,
        template_id,
        opts \\ []
      ) do
    optional_params = %{
      :workflow => :body
    }

    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/templates/#{template_id}/workflow")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.Workflow{})
  end
end
