# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.GroupBrands do
  @moduledoc """
  API calls for all endpoints tagged `GroupBrands`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Deletes brand information from a group.
  This method deletes one or more brands from a group.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - group_id (String.t): The id of the group.
  - opts (KeywordList): [optional] Optional parameters
    - :brands_request (BrandsRequest):

  ## Returns

  {:ok, %DocuSign.Model.GroupBrands{}} on success
  {:error, info} on failure
  """
  @spec brands_delete_group_brands(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.GroupBrands.t()} | {:error, Tesla.Env.t()}
  def brands_delete_group_brands(connection, account_id, group_id, opts \\ []) do
    optional_params = %{
      :brandsRequest => :body
    }

    %{}
    |> method(:delete)
    |> url("/v2.1/accounts/#{account_id}/groups/#{group_id}/brands")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.GroupBrands{})
  end

  @doc """
  Gets the brand information for a group.
  This method returns information about the brands associated with a group.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - group_id (String.t): The id of the group.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.GroupBrands{}} on success
  {:error, info} on failure
  """
  @spec brands_get_group_brands(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.GroupBrands.t()} | {:error, Tesla.Env.t()}
  def brands_get_group_brands(connection, account_id, group_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/groups/#{group_id}/brands")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.GroupBrands{})
  end

  @doc """
  Adds an existing brand to a group.
  This method adds one or more existing brands to a group based on the &#x60;groupId&#x60;.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - group_id (String.t): The ID of the group being accessed.
  - opts (KeywordList): [optional] Optional parameters
    - :brands_request (BrandsRequest):

  ## Returns

  {:ok, %DocuSign.Model.GroupBrands{}} on success
  {:error, info} on failure
  """
  @spec brands_put_group_brands(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.GroupBrands.t()} | {:error, Tesla.Env.t()}
  def brands_put_group_brands(connection, account_id, group_id, opts \\ []) do
    optional_params = %{
      :brandsRequest => :body
    }

    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/groups/#{group_id}/brands")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.GroupBrands{})
  end
end
