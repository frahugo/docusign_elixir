# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.Notary do
  @moduledoc """
  API calls for all endpoints tagged `Notary`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Gets settings for a  notary user.
  Gets settings for a notary user. The current user must be a notary.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :include_jurisdictions (String.t): If **true**, the response will include a &#x60;jurisdiction&#x60; property that contains an array of all supported jurisdictions for the current user.

  ## Returns

  {:ok, %DocuSign.Model.NotaryResult{}} on success
  {:error, info} on failure
  """
  @spec notary_get_notary(Tesla.Env.client(), keyword()) ::
          {:ok, DocuSign.Model.NotaryResult.t()} | {:error, Tesla.Env.t()}
  def notary_get_notary(connection, opts \\ []) do
    optional_params = %{
      :include_jurisdictions => :query
    }

    %{}
    |> method(:get)
    |> url("/v2.1/current_user/notary")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.NotaryResult{})
  end

  @doc """
  Registers the current user as a notary.
  Registers the current user as a notary.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :notary (Notary):

  ## Returns

  {:ok, %DocuSign.Model.Notary{}} on success
  {:error, info} on failure
  """
  @spec notary_post_notary(Tesla.Env.client(), keyword()) ::
          {:ok, DocuSign.Model.Notary.t()} | {:error, Tesla.Env.t()}
  def notary_post_notary(connection, opts \\ []) do
    optional_params = %{
      :notary => :body
    }

    %{}
    |> method(:post)
    |> url("/v2.1/current_user/notary")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.Notary{})
  end

  @doc """
  Updates notary information for the current user.
  Updates notary information for the current user.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :notary (Notary):

  ## Returns

  {:ok, %DocuSign.Model.Notary{}} on success
  {:error, info} on failure
  """
  @spec notary_put_notary(Tesla.Env.client(), keyword()) ::
          {:ok, DocuSign.Model.Notary.t()} | {:error, Tesla.Env.t()}
  def notary_put_notary(connection, opts \\ []) do
    optional_params = %{
      :notary => :body
    }

    %{}
    |> method(:put)
    |> url("/v2.1/current_user/notary")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.Notary{})
  end
end
