# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.NotaryJurisdiction do
  @moduledoc """
  API calls for all endpoints tagged `NotaryJurisdiction`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Deletes the specified jurisdiction.
  Deletes the specified jurisdiction.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - jurisdiction_id (String.t): The ID of the jurisdiction. The following jurisdictions are supported:  -  &#x60;5 - California&#x60; -  &#x60;6 - Colorado&#x60; -  &#x60;9 - Florida&#x60; -  &#x60;10 - Georgia&#x60; -  &#x60;12 - Idaho&#x60; -  &#x60;13 - Illinois&#x60; -  &#x60;14 - Indiana&#x60; -  &#x60;15 - Iowa&#x60; -  &#x60;17 - Kentucky&#x60; -  &#x60;23 - Minnesota&#x60; -  &#x60;25 - Missouri&#x60; -  &#x60;30 - New Jersey&#x60; -  &#x60;32 - New York&#x60; -  &#x60;33 - North Carolina&#x60; -  &#x60;35 - Ohio&#x60; -  &#x60;37 - Oregon&#x60; -  &#x60;38 - Pennsylvania&#x60; -  &#x60;40 - South Carolina&#x60; -  &#x60;43 - Texas&#x60; -  &#x60;44 - Utah&#x60; -  &#x60;47 - Washington&#x60; -  &#x60;48 - West Virginia&#x60; -  &#x60;49 - Wisconsin&#x60; -  &#x60;62 - Florida Commissioner of Deeds&#x60;
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec notary_jurisdictions_delete_notary_jurisdiction(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def notary_jurisdictions_delete_notary_jurisdiction(connection, jurisdiction_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/v2.1/current_user/notary/jurisdictions/#{jurisdiction_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets a jurisdiction object for the current user. The user must be a notary.
  Gets a jurisdiction object for the current user.  The following restrictions apply:  - The current user must be a notary. - The &#x60;jurisdictionId&#x60; must be a jurisdiction that the notary is registered for.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - jurisdiction_id (String.t): The ID of the jurisdiction. The following jurisdictions are supported:  -  &#x60;5 - California&#x60; -  &#x60;6 - Colorado&#x60; -  &#x60;9 - Florida&#x60; -  &#x60;10 - Georgia&#x60; -  &#x60;12 - Idaho&#x60; -  &#x60;13 - Illinois&#x60; -  &#x60;14 - Indiana&#x60; -  &#x60;15 - Iowa&#x60; -  &#x60;17 - Kentucky&#x60; -  &#x60;23 - Minnesota&#x60; -  &#x60;25 - Missouri&#x60; -  &#x60;30 - New Jersey&#x60; -  &#x60;32 - New York&#x60; -  &#x60;33 - North Carolina&#x60; -  &#x60;35 - Ohio&#x60; -  &#x60;37 - Oregon&#x60; -  &#x60;38 - Pennsylvania&#x60; -  &#x60;40 - South Carolina&#x60; -  &#x60;43 - Texas&#x60; -  &#x60;44 - Utah&#x60; -  &#x60;47 - Washington&#x60; -  &#x60;48 - West Virginia&#x60; -  &#x60;49 - Wisconsin&#x60; -  &#x60;62 - Florida Commissioner of Deeds&#x60;
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.NotaryJurisdiction{}} on success
  {:error, info} on failure
  """
  @spec notary_jurisdictions_get_notary_jurisdiction(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.NotaryJurisdiction.t()} | {:error, Tesla.Env.t()}
  def notary_jurisdictions_get_notary_jurisdiction(connection, jurisdiction_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2.1/current_user/notary/jurisdictions/#{jurisdiction_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.NotaryJurisdiction{})
  end

  @doc """
  Returns a list of jurisdictions that the notary is registered in.
  Returns a list of jurisdictions that the notary is registered in. The current user must be a notary.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.NotaryJurisdictionList{}} on success
  {:error, info} on failure
  """
  @spec notary_jurisdictions_get_notary_jurisdictions(Tesla.Env.client(), keyword()) ::
          {:ok, DocuSign.Model.NotaryJurisdictionList.t()} | {:error, Tesla.Env.t()}
  def notary_jurisdictions_get_notary_jurisdictions(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2.1/current_user/notary/jurisdictions")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.NotaryJurisdictionList{})
  end

  @doc """
  Creates a jurisdiction object.
  Creates a jurisdiction object.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :notary_jurisdiction (NotaryJurisdiction):

  ## Returns

  {:ok, %DocuSign.Model.NotaryJurisdiction{}} on success
  {:error, info} on failure
  """
  @spec notary_jurisdictions_post_notary_jurisdictions(Tesla.Env.client(), keyword()) ::
          {:ok, DocuSign.Model.NotaryJurisdiction.t()} | {:error, Tesla.Env.t()}
  def notary_jurisdictions_post_notary_jurisdictions(connection, opts \\ []) do
    optional_params = %{
      :notaryJurisdiction => :body
    }

    %{}
    |> method(:post)
    |> url("/v2.1/current_user/notary/jurisdictions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.NotaryJurisdiction{})
  end

  @doc """
  Updates the jurisdiction information about a notary.
  Updates the jurisdiction information about a notary.  The following restrictions apply:  - The current user must be a notary. - The &#x60;jurisdictionId&#x60; path parameter must be a jurisdiction that the notary is registered for. - The &#x60;jurisdictionId&#x60; path parameter must match the request body&#39;s &#x60;jurisdiction.jurisdictionId&#x60;.  The request body must have a full &#x60;jurisdiction&#x60; object for the jurisdiction property. The best way to do this is to use &#x60;getNotaryJurisdiction&#x60; to obtain the current values and update the properties you want to change.  For example, assume &#x60;getNotaryJurisdiction&#x60; returns this:  &#x60;&#x60;&#x60; {     \&quot;jurisdiction\&quot;: {         \&quot;jurisdictionId\&quot;: \&quot;15\&quot;,         \&quot;name\&quot;: \&quot;Iowa\&quot;,         \&quot;county\&quot;: \&quot;\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;countyInSeal\&quot;: \&quot;false\&quot;,         \&quot;commissionIdInSeal\&quot;: \&quot;true\&quot;,         \&quot;stateNameInSeal\&quot;: \&quot;true\&quot;,         \&quot;notaryPublicInSeal\&quot;: \&quot;true\&quot;,         \&quot;allowSystemCreatedSeal\&quot;: \&quot;true\&quot;,         \&quot;allowUserUploadedSeal\&quot;: \&quot;false\&quot;     },     \&quot;commissionId\&quot;: \&quot;123456\&quot;,     \&quot;commissionExpiration\&quot;: \&quot;2020-08-31T07:00:00.0000000Z\&quot;,     \&quot;registeredName\&quot;: \&quot;Bob Notary\&quot;,     \&quot;county\&quot;: \&quot;Adams\&quot;,     \&quot;sealType\&quot;: \&quot;system_created\&quot; } &#x60;&#x60;&#x60;  If you want to change the name of the notary from \&quot;Bob Notary\&quot; to \&quot;Robert Notary\&quot;, your request body would be:  &#x60;&#x60;&#x60; {     \&quot;jurisdiction\&quot;: {         \&quot;jurisdictionId\&quot;: \&quot;15\&quot;,         \&quot;name\&quot;: \&quot;Iowa\&quot;,         \&quot;county\&quot;: \&quot;\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;countyInSeal\&quot;: \&quot;false\&quot;,         \&quot;commissionIdInSeal\&quot;: \&quot;true\&quot;,         \&quot;stateNameInSeal\&quot;: \&quot;true\&quot;,         \&quot;notaryPublicInSeal\&quot;: \&quot;true\&quot;,         \&quot;allowSystemCreatedSeal\&quot;: \&quot;true\&quot;,         \&quot;allowUserUploadedSeal\&quot;: \&quot;false\&quot;     },     \&quot;commissionId\&quot;: \&quot;123456\&quot;,     \&quot;commissionExpiration\&quot;: \&quot;2020-08-31T07:00:00.0000000Z\&quot;,     \&quot;registeredName\&quot;: \&quot;Robert Notary\&quot;,     \&quot;county\&quot;: \&quot;Adams\&quot;,     \&quot;sealType\&quot;: \&quot;system_created\&quot; } &#x60;&#x60;&#x60;

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - jurisdiction_id (String.t): The ID of the jurisdiction. The following jurisdictions are supported:  -  &#x60;5 - California&#x60; -  &#x60;6 - Colorado&#x60; -  &#x60;9 - Florida&#x60; -  &#x60;10 - Georgia&#x60; -  &#x60;12 - Idaho&#x60; -  &#x60;13 - Illinois&#x60; -  &#x60;14 - Indiana&#x60; -  &#x60;15 - Iowa&#x60; -  &#x60;17 - Kentucky&#x60; -  &#x60;23 - Minnesota&#x60; -  &#x60;25 - Missouri&#x60; -  &#x60;30 - New Jersey&#x60; -  &#x60;32 - New York&#x60; -  &#x60;33 - North Carolina&#x60; -  &#x60;35 - Ohio&#x60; -  &#x60;37 - Oregon&#x60; -  &#x60;38 - Pennsylvania&#x60; -  &#x60;40 - South Carolina&#x60; -  &#x60;43 - Texas&#x60; -  &#x60;44 - Utah&#x60; -  &#x60;47 - Washington&#x60; -  &#x60;48 - West Virginia&#x60; -  &#x60;49 - Wisconsin&#x60; -  &#x60;62 - Florida Commissioner of Deeds&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :notary_jurisdiction (NotaryJurisdiction):

  ## Returns

  {:ok, %DocuSign.Model.NotaryJurisdiction{}} on success
  {:error, info} on failure
  """
  @spec notary_jurisdictions_put_notary_jurisdiction(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.NotaryJurisdiction.t()} | {:error, Tesla.Env.t()}
  def notary_jurisdictions_put_notary_jurisdiction(connection, jurisdiction_id, opts \\ []) do
    optional_params = %{
      :notaryJurisdiction => :body
    }

    %{}
    |> method(:put)
    |> url("/v2.1/current_user/notary/jurisdictions/#{jurisdiction_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.NotaryJurisdiction{})
  end
end
