# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.Reports do
  @moduledoc """
  API calls for all endpoints tagged `Reports`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Removes a customized report.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - id (String.t): A unique ID for the Salesforce object.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.ReportInProductSaveResponse{}} on success
  {:error, info} on failure
  """
  @spec reports_in_product_delete_report_in_product(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, DocuSign.Model.ReportInProductSaveResponse.t()} | {:error, Tesla.Env.t()}
  def reports_in_product_delete_report_in_product(connection, account_id, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/v2.1/accounts/#{account_id}/reports/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ReportInProductSaveResponse{})
  end

  @doc """
  Gets the specified report.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - id (String.t): A unique ID for the Salesforce object.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.ReportInProductGet{}} on success
  {:error, info} on failure
  """
  @spec reports_in_product_get_report_in_product(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.ReportInProductGet.t()} | {:error, Tesla.Env.t()}
  def reports_in_product_get_report_in_product(connection, account_id, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/reports/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ReportInProductGet{})
  end

  @doc """
  Gets the descriptors for all of an account&#39;s active reports (for listings).


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.ReportInProductList{}} on success
  {:error, info} on failure
  """
  @spec reports_in_product_get_report_in_product_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.ReportInProductList.t()} | {:error, Tesla.Env.t()}
  def reports_in_product_get_report_in_product_list(connection, account_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/reports")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ReportInProductList{})
  end

  @doc """
  Creates a customized report.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters
    - :report_in_product_run_request (ReportInProductRunRequest):

  ## Returns

  {:ok, %DocuSign.Model.ReportInProductSaveResponse{}} on success
  {:error, info} on failure
  """
  @spec reports_in_product_post_report_in_product_create(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, DocuSign.Model.ReportInProductSaveResponse.t()} | {:error, Tesla.Env.t()}
  def reports_in_product_post_report_in_product_create(connection, account_id, opts \\ []) do
    optional_params = %{
      :reportInProductRunRequest => :body
    }

    %{}
    |> method(:post)
    |> url("/v2.1/accounts/#{account_id}/reports")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ReportInProductSaveResponse{})
  end

  @doc """
  Returns the result set from running the specified report.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters
    - :report_in_product_run_request (ReportInProductRunRequest):

  ## Returns

  {:ok, %DocuSign.Model.ReportInProductRunResponse{}} on success
  {:error, info} on failure
  """
  @spec reports_in_product_put_report_in_product_run_results(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.ReportInProductRunResponse.t()} | {:error, Tesla.Env.t()}
  def reports_in_product_put_report_in_product_run_results(connection, account_id, opts \\ []) do
    optional_params = %{
      :reportInProductRunRequest => :body
    }

    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/reports/report_results")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ReportInProductRunResponse{})
  end

  @doc """
  Saves a customized report.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - id (String.t): A unique ID for the Salesforce object.
  - opts (KeywordList): [optional] Optional parameters
    - :report_in_product_run_request (ReportInProductRunRequest):

  ## Returns

  {:ok, %DocuSign.Model.ReportInProductSaveResponse{}} on success
  {:error, info} on failure
  """
  @spec reports_in_product_put_report_in_product_save(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, DocuSign.Model.ReportInProductSaveResponse.t()} | {:error, Tesla.Env.t()}
  def reports_in_product_put_report_in_product_save(connection, account_id, id, opts \\ []) do
    optional_params = %{
      :reportInProductRunRequest => :body
    }

    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/reports/#{id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.ReportInProductSaveResponse{})
  end

  @doc """
  Returns the specified report as a CSV string.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters
    - :report_in_product_csv_run_request (ReportInProductCsvRunRequest):

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec reports_in_product_put_report_results_csv(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def reports_in_product_put_report_results_csv(connection, account_id, opts \\ []) do
    optional_params = %{
      :reportInProductCsvRunRequest => :body
    }

    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/reports/report_results_csv")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
