# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.ResponsiveHtmlPreview do
  @moduledoc """
  API calls for all endpoints tagged `ResponsiveHtmlPreview`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Creates a preview of the responsive versions of all of the documents in an envelope.
  Creates a preview of the [responsive](https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/responsive/), HTML versions of all of the documents in an envelope. This method enables you to preview the PDF document conversions to responsive HTML across device types prior to sending.  The request body is a &#x60;documentHtmlDefinition&#x60; object, which holds the responsive signing parameters that define how to generate the HTML version of the documents.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - envelope_id (String.t): The envelope&#39;s GUID.   Example: &#x60;93be49ab-xxxx-xxxx-xxxx-f752070d71ec&#x60;
  - opts (KeywordList): [optional] Optional parameters
    - :document_html_definition (DocumentHtmlDefinition):

  ## Returns

  {:ok, %DocuSign.Model.DocumentHtmlDefinitions{}} on success
  {:error, info} on failure
  """
  @spec responsive_html_post_responsive_html_preview(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.DocumentHtmlDefinitions.t()} | {:error, Tesla.Env.t()}
  def responsive_html_post_responsive_html_preview(
        connection,
        account_id,
        envelope_id,
        opts \\ []
      ) do
    optional_params = %{
      :documentHtmlDefinition => :body
    }

    %{}
    |> method(:post)
    |> url("/v2.1/accounts/#{account_id}/envelopes/#{envelope_id}/responsive_html_preview")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.DocumentHtmlDefinitions{})
  end
end
