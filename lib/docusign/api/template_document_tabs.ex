# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.TemplateDocumentTabs do
  @moduledoc """
  API calls for all endpoints tagged `TemplateDocumentTabs`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Deletes tabs from an envelope document.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - document_id (String.t): The &#x60;documentId&#x60; is set by the API client. It is an integer that falls between &#x60;1&#x60; and 2,147,483,647. The value is encoded as a string without commas. The values &#x60;1&#x60;, &#x60;2&#x60;, &#x60;3&#x60;, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a &#x60;documentId&#x60; property that specifies the document on which to place the tab.
  - template_id (String.t): The id of the template.
  - opts (KeywordList): [optional] Optional parameters
    - :template_tabs (TemplateTabs):

  ## Returns

  {:ok, %DocuSign.Model.Tabs{}} on success
  {:error, info} on failure
  """
  @spec tabs_delete_template_document_tabs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.Tabs.t()} | {:error, Tesla.Env.t()}
  def tabs_delete_template_document_tabs(
        connection,
        account_id,
        document_id,
        template_id,
        opts \\ []
      ) do
    optional_params = %{
      :templateTabs => :body
    }

    %{}
    |> method(:delete)
    |> url("/v2.1/accounts/#{account_id}/templates/#{template_id}/documents/#{document_id}/tabs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.Tabs{})
  end

  @doc """
  Returns tabs on the document.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - document_id (String.t): The &#x60;documentId&#x60; is set by the API client. It is an integer that falls between &#x60;1&#x60; and 2,147,483,647. The value is encoded as a string without commas. The values &#x60;1&#x60;, &#x60;2&#x60;, &#x60;3&#x60;, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a &#x60;documentId&#x60; property that specifies the document on which to place the tab.
  - template_id (String.t): The id of the template.
  - opts (KeywordList): [optional] Optional parameters
    - :page_numbers (String.t): Filters for tabs that occur on the pages that you specify. Enter as a comma-separated list of page Guids.  Example: &#x60;page_numbers&#x3D;2,6&#x60;

  ## Returns

  {:ok, %DocuSign.Model.TemplateDocumentTabs{}} on success
  {:error, info} on failure
  """
  @spec tabs_get_template_document_tabs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.TemplateDocumentTabs.t()} | {:error, Tesla.Env.t()}
  def tabs_get_template_document_tabs(
        connection,
        account_id,
        document_id,
        template_id,
        opts \\ []
      ) do
    optional_params = %{
      :page_numbers => :query
    }

    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/templates/#{template_id}/documents/#{document_id}/tabs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.TemplateDocumentTabs{})
  end

  @doc """
  Returns tabs on the specified page.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - document_id (String.t): The &#x60;documentId&#x60; is set by the API client. It is an integer that falls between &#x60;1&#x60; and 2,147,483,647. The value is encoded as a string without commas. The values &#x60;1&#x60;, &#x60;2&#x60;, &#x60;3&#x60;, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a &#x60;documentId&#x60; property that specifies the document on which to place the tab.
  - page_number (String.t): The page number being accessed.
  - template_id (String.t): The id of the template.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.TemplateDocumentTabs{}} on success
  {:error, info} on failure
  """
  @spec tabs_get_template_page_tabs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.TemplateDocumentTabs.t()} | {:error, Tesla.Env.t()}
  def tabs_get_template_page_tabs(
        connection,
        account_id,
        document_id,
        page_number,
        template_id,
        _opts \\ []
      ) do
    %{}
    |> method(:get)
    |> url(
      "/v2.1/accounts/#{account_id}/templates/#{template_id}/documents/#{document_id}/pages/#{
        page_number
      }/tabs"
    )
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.TemplateDocumentTabs{})
  end

  @doc """
  Create Template Document Tabs
  This method creates Template Document Tabs.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - document_id (String.t): The &#x60;documentId&#x60; is set by the API client. It is an integer that falls between &#x60;1&#x60; and 2,147,483,647. The value is encoded as a string without commas. The values &#x60;1&#x60;, &#x60;2&#x60;, &#x60;3&#x60;, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a &#x60;documentId&#x60; property that specifies the document on which to place the tab.
  - template_id (String.t): The id of the template.
  - opts (KeywordList): [optional] Optional parameters
    - :template_tabs (TemplateTabs):

  ## Returns

  {:ok, %DocuSign.Model.Tabs{}} on success
  {:error, info} on failure
  """
  @spec tabs_post_template_document_tabs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.Tabs.t()} | {:error, Tesla.Env.t()}
  def tabs_post_template_document_tabs(
        connection,
        account_id,
        document_id,
        template_id,
        opts \\ []
      ) do
    optional_params = %{
      :templateTabs => :body
    }

    %{}
    |> method(:post)
    |> url("/v2.1/accounts/#{account_id}/templates/#{template_id}/documents/#{document_id}/tabs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.Tabs{})
  end

  @doc """
  Updates the tabs for a template.


  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - document_id (String.t): The &#x60;documentId&#x60; is set by the API client. It is an integer that falls between &#x60;1&#x60; and 2,147,483,647. The value is encoded as a string without commas. The values &#x60;1&#x60;, &#x60;2&#x60;, &#x60;3&#x60;, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a &#x60;documentId&#x60; property that specifies the document on which to place the tab.
  - template_id (String.t): The id of the template.
  - opts (KeywordList): [optional] Optional parameters
    - :template_tabs (TemplateTabs):

  ## Returns

  {:ok, %DocuSign.Model.Tabs{}} on success
  {:error, info} on failure
  """
  @spec tabs_put_template_document_tabs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.Tabs.t()} | {:error, Tesla.Env.t()}
  def tabs_put_template_document_tabs(
        connection,
        account_id,
        document_id,
        template_id,
        opts \\ []
      ) do
    optional_params = %{
      :templateTabs => :body
    }

    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/templates/#{template_id}/documents/#{document_id}/tabs")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.Tabs{})
  end
end
