# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.TemplateDocuments do
  @moduledoc """
  API calls for all endpoints tagged `TemplateDocuments`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Deletes documents from a template.
  This method deletes one or more documents from an existing template.  To delete a document, use only the relevant parts of the [&#x60;envelopeDefinition&#x60;](#envelopeDefinition). For example, this request body specifies that you want to delete the document whose &#x60;documentId&#x60; is \&quot;1\&quot;.   &#x60;&#x60;&#x60;text {   \&quot;documents\&quot;: [     {       \&quot;documentId\&quot;: \&quot;1\&quot;     }   ] } &#x60;&#x60;&#x60;

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - template_id (String.t): The id of the template.
  - opts (KeywordList): [optional] Optional parameters
    - :envelope_definition (EnvelopeDefinition):

  ## Returns

  {:ok, %DocuSign.Model.TemplateDocumentsResult{}} on success
  {:error, info} on failure
  """
  @spec documents_delete_template_documents(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.TemplateDocumentsResult.t()} | {:error, Tesla.Env.t()}
  def documents_delete_template_documents(connection, account_id, template_id, opts \\ []) do
    optional_params = %{
      :envelopeDefinition => :body
    }

    %{}
    |> method(:delete)
    |> url("/v2.1/accounts/#{account_id}/templates/#{template_id}/documents")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.TemplateDocumentsResult{})
  end

  @doc """
  Gets PDF documents from a template.
  This method retrieves one or more PDF documents from the template that you specify.  You can specify the ID of the document to retrieve, or pass in the value &#x60;combined&#x60; to retrieve all documents in the template as a single PDF file.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - document_id (String.t): The &#x60;documentId&#x60; is set by the API client. It is an integer that falls between &#x60;1&#x60; and 2,147,483,647. The value is encoded as a string without commas. The values &#x60;1&#x60;, &#x60;2&#x60;, &#x60;3&#x60;, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a &#x60;documentId&#x60; property that specifies the document on which to place the tab.
  - template_id (String.t): The id of the template.
  - opts (KeywordList): [optional] Optional parameters
    - :encrypt (String.t): When set to **true**, the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. You can decrypt the documents by using the Key Manager DecryptDocument API method. For more information about Key Manager, see the DocuSign Security Appliance Installation Guide that your organization received from DocuSign.
    - :show_changes (String.t): When set to **true**, any document fields that a recipient changed are highlighted in yellow in the returned PDF document, and optional signatures or initials are outlined in red.

  ## Returns

  {:ok, %DocuSign.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec documents_get_template_document(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def documents_get_template_document(
        connection,
        account_id,
        document_id,
        template_id,
        opts \\ []
      ) do
    optional_params = %{
      :encrypt => :query,
      :show_changes => :query
    }

    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/templates/#{template_id}/documents/#{document_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Gets a list of documents associated with a template.
  Retrieves a list of documents associated with the specified template.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - template_id (String.t): The id of the template.
  - opts (KeywordList): [optional] Optional parameters
    - :include_tabs (String.t): Reserved for DocuSign.

  ## Returns

  {:ok, %DocuSign.Model.TemplateDocumentsResult{}} on success
  {:error, info} on failure
  """
  @spec documents_get_template_documents(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.TemplateDocumentsResult.t()} | {:error, Tesla.Env.t()}
  def documents_get_template_documents(connection, account_id, template_id, opts \\ []) do
    optional_params = %{
      :include_tabs => :query
    }

    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/templates/#{template_id}/documents")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.TemplateDocumentsResult{})
  end

  @doc """
  Updates a template document.
  This methods updates an existing template document.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - document_id (String.t): The &#x60;documentId&#x60; is set by the API client. It is an integer that falls between &#x60;1&#x60; and 2,147,483,647. The value is encoded as a string without commas. The values &#x60;1&#x60;, &#x60;2&#x60;, &#x60;3&#x60;, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a &#x60;documentId&#x60; property that specifies the document on which to place the tab.
  - template_id (String.t): The id of the template.
  - opts (KeywordList): [optional] Optional parameters
    - :is_envelope_definition (String.t):
    - :envelope_definition (EnvelopeDefinition):

  ## Returns

  {:ok, %DocuSign.Model.EnvelopeDocument{}} on success
  {:error, info} on failure
  """
  @spec documents_put_template_document(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.EnvelopeDocument.t()} | {:error, Tesla.Env.t()}
  def documents_put_template_document(
        connection,
        account_id,
        document_id,
        template_id,
        opts \\ []
      ) do
    optional_params = %{
      :is_envelope_definition => :query,
      :envelopeDefinition => :body
    }

    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/templates/#{template_id}/documents/#{document_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.EnvelopeDocument{})
  end

  @doc """
  Adds documents to a template document.
  Adds one or more documents to an existing template document.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - template_id (String.t): The id of the template.
  - opts (KeywordList): [optional] Optional parameters
    - :envelope_definition (EnvelopeDefinition):

  ## Returns

  {:ok, %DocuSign.Model.TemplateDocumentsResult{}} on success
  {:error, info} on failure
  """
  @spec documents_put_template_documents(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.TemplateDocumentsResult.t()} | {:error, Tesla.Env.t()}
  def documents_put_template_documents(connection, account_id, template_id, opts \\ []) do
    optional_params = %{
      :envelopeDefinition => :body
    }

    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/templates/#{template_id}/documents")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.TemplateDocumentsResult{})
  end
end
