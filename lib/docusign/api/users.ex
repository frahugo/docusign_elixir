# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.Users do
  @moduledoc """
  API calls for all endpoints tagged `Users`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Gets the user information for a specified user.
  Retrieves the user information for the specified user.   To return additional user information that details the last login date, login status, and the user&#39;s password expiration date, set the optional &#x60;additional_info&#x60; query string parameter to **true**.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - user_id (String.t): The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, &#x60;userId&#x60; can represent another user whom the Administrator is accessing.
  - opts (KeywordList): [optional] Optional parameters
    - :additional_info (String.t): Setting this parameter has no effect in this operation.
    - :email (String.t): Setting this parameter has no effect in this operation.

  ## Returns

  {:ok, %DocuSign.Model.UserInformation{}} on success
  {:error, info} on failure
  """
  @spec user_get_user(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.UserInformation.t()} | {:error, Tesla.Env.t()}
  def user_get_user(connection, account_id, user_id, opts \\ []) do
    optional_params = %{
      :additional_info => :query,
      :email => :query
    }

    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/users/#{user_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.UserInformation{})
  end

  @doc """
  Deletes the user profile image for the specified user.
  Deletes the user profile image from the  specified user&#39;s profile.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - user_id (String.t): The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, &#x60;userId&#x60; can represent another user whom the Administrator is accessing.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec user_profile_image_delete_user_profile_image(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def user_profile_image_delete_user_profile_image(connection, account_id, user_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/v2.1/accounts/#{account_id}/users/#{user_id}/profile/image")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieves the user profile image for the specified user.
  Retrieves the user profile picture for the specified user. The image is returned in the same format as uploaded.  The userId parameter specified in the endpoint must match the authenticated user&#39;s user ID and the user must be a member of the specified account.  If successful, the response returns a 200 - OK and the user profile image.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - user_id (String.t): The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, &#x60;userId&#x60; can represent another user whom the Administrator is accessing.
  - opts (KeywordList): [optional] Optional parameters
    - :encoding (String.t): Reserved for DocuSign.

  ## Returns

  {:ok, %DocuSign.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec user_profile_image_get_user_profile_image(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, String.t()} | {:error, Tesla.Env.t()}
  def user_profile_image_get_user_profile_image(connection, account_id, user_id, opts \\ []) do
    optional_params = %{
      :encoding => :query
    }

    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/users/#{user_id}/profile/image")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Updates the user profile image for a specified user.
  Updates the user profile image by uploading an image to the user profile.  The supported image formats are: gif, png, jpeg, and bmp. The file must be less than 200K. For best viewing results, DocuSign recommends that the image is no more than 79 pixels wide and high.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - user_id (String.t): The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, &#x60;userId&#x60; can represent another user whom the Administrator is accessing.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec user_profile_image_put_user_profile_image(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def user_profile_image_put_user_profile_image(connection, account_id, user_id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/users/#{user_id}/profile/image")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Updates user information for the specified user.
  To update user information for a specific user, submit a [Users](#Users) object with updated field values in the request body of this operation.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - user_id (String.t): The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, &#x60;userId&#x60; can represent another user whom the Administrator is accessing.
  - opts (KeywordList): [optional] Optional parameters
    - :user_information (UserInformation):

  ## Returns

  {:ok, %DocuSign.Model.UserInformation{}} on success
  {:error, info} on failure
  """
  @spec user_put_user(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.UserInformation.t()} | {:error, Tesla.Env.t()}
  def user_put_user(connection, account_id, user_id, opts \\ []) do
    optional_params = %{
      :userInformation => :body
    }

    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/users/#{user_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.UserInformation{})
  end

  @doc """
  Gets the user account settings for a specified user.
  Retrieves a list of the account settings and email notification information for the specified user.  The response returns the account setting name/value information and the email notification settings for the specified user. For more information, see [Users:create](https://developers.docusign.com/docs/esign-rest-api/reference/Users/Users/create/).

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - user_id (String.t): The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, &#x60;userId&#x60; can represent another user whom the Administrator is accessing.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.UserSettingsInformation{}} on success
  {:error, info} on failure
  """
  @spec user_settings_get_user_settings(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.UserSettingsInformation.t()} | {:error, Tesla.Env.t()}
  def user_settings_get_user_settings(connection, account_id, user_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/users/#{user_id}/settings")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.UserSettingsInformation{})
  end

  @doc """
  Updates the user account settings for a specified user.
  Updates the account settings list and email notification types for the specified user.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - user_id (String.t): The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, &#x60;userId&#x60; can represent another user whom the Administrator is accessing.
  - opts (KeywordList): [optional] Optional parameters
    - :user_settings_information (UserSettingsInformation):

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec user_settings_put_user_settings(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def user_settings_put_user_settings(connection, account_id, user_id, opts \\ []) do
    optional_params = %{
      :userSettingsInformation => :body
    }

    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/users/#{user_id}/settings")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Removes users account privileges.
  Closes one or more user records in the account. Users are never deleted from an account, but closing a user prevents them from using account functions.  The response specifies whether the API execution succeeded (200 - OK) or failed (400 - Error). The response contains a user structure similar to the request and includes the user changes. If an error occurred during the DELETE operation for any of the users, the response for that user contains an &#x60;errorDetails&#x60; property with &#x60;errorCode&#x60; and &#x60;message&#x60; properties.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters
    - :delete (String.t): ID of the user to delete. This parameter takes a comma-separated list of values in the format: &#x60;Groups,PermissionSet,SigningGroupsEmail&#x60;.
    - :user_info_list (UserInfoList):

  ## Returns

  {:ok, %DocuSign.Model.UsersResponse{}} on success
  {:error, info} on failure
  """
  @spec users_delete_users(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.UsersResponse.t()} | {:error, Tesla.Env.t()}
  def users_delete_users(connection, account_id, opts \\ []) do
    optional_params = %{
      :delete => :query,
      :userInfoList => :body
    }

    %{}
    |> method(:delete)
    |> url("/v2.1/accounts/#{account_id}/users")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.UsersResponse{})
  end

  @doc """
  Retrieves the list of users for the specified account.
  Retrieves the list of users for the specified account.  The response returns the list of users for the account, with information about the result set. If the &#x60;additional_info&#x60; query is added to the endpoint and set to **true**, full user information is returned for each user.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): (Required) The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters
    - :additional_info (String.t): When set to **true**, the custom settings information is returned for each user in the account. If this parameter is omitted, the default behavior is **false**.
    - :count (String.t): The number of records to return. This number must be greater than &#x60;0&#x60; and less than or equal to &#x60;100&#x60;.
    - :email (String.t): Filters results based on the email address associated with the user that you want to return.  **Note**: You can use either this parameter or the &#x60;email_substring&#x60; parameter, but not both. For older accounts, this parameter might return multiple users who are associated with a single email address.
    - :email_substring (String.t): Filters results based on a fragment of an email address. For example, you could enter &#x60;gmail&#x60; to return all users who have Gmail addresses.  **Note**: You do not use a wildcard character with this parameter. You can use either this parameter or the &#x60;email&#x60; parameter, but not both.
    - :group_id (String.t): Filters results based on one or more group IDs.
    - :include_usersettings_for_csv (String.t): When set to **true**, the response includes the &#x60;userSettings&#x60; object data in CSV format.
    - :login_status (String.t): When set to **true**, the response includes the login status of each user.
    - :not_group_id (String.t): Return user records excluding the specified group IDs.
    - :start_position (String.t): The position within the total result set from which to start returning values.
    - :status (String.t): Filters results by user account status. Possible values are:  * &#x60;ActivationRequired&#x60; * &#x60;ActivationSent&#x60; * &#x60;Active&#x60; * &#x60;Closed&#x60; * &#x60;Disabled&#x60;
    - :user_name_substring (String.t): Filters results based on a full or partial user name.  **Note**: When you enter a partial user name, you do not use a wildcard character.

  ## Returns

  {:ok, %DocuSign.Model.UserInformationList{}} on success
  {:error, info} on failure
  """
  @spec users_get_users(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.UserInformationList.t()} | {:error, Tesla.Env.t()}
  def users_get_users(connection, account_id, opts \\ []) do
    optional_params = %{
      :additional_info => :query,
      :count => :query,
      :email => :query,
      :email_substring => :query,
      :group_id => :query,
      :include_usersettings_for_csv => :query,
      :login_status => :query,
      :not_group_id => :query,
      :start_position => :query,
      :status => :query,
      :user_name_substring => :query
    }

    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/users")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.UserInformationList{})
  end

  @doc """
  Adds new users to the specified account.
  Adds new users to an account.  The body of this request is an array of &#x60;newUsers&#x60; objects. For each new user, you must provide at least the &#x60;userName&#x60; and &#x60;email&#x60; properties.  The &#x60;userSettings&#x60; property specifies the actions users can perform. In the example below, Tal Mason will be able to send envelopes, and the activation email will be in French because the &#x60;locale&#x60; is set to &#x60;fr&#x60;.   &#x60;&#x60;&#x60; POST /restapi/v2.1/accounts/{accountId}/users Content-Type: application/json &#x60;&#x60;&#x60; &#x60;&#x60;&#x60; {   \&quot;newUsers\&quot;: [     {       \&quot;userName\&quot;: \&quot;Claire Horace\&quot;,       \&quot;email\&quot;: \&quot;claire@example.com\&quot;     },     {       \&quot;userName\&quot;: \&quot;Tal Mason\&quot;,       \&quot;email\&quot;: \&quot;talmason@example.com\&quot;,       \&quot;company\&quot;: \&quot;TeleSel\&quot;,       \&quot;userSettings\&quot;: {         \&quot;locale\&quot;: \&quot;fr\&quot;,         \&quot;canSendEnvelope\&quot;: true       }     }   ] } &#x60;&#x60;&#x60;  A successful response is a &#x60;newUsers&#x60; array with information about the newly created users. If there was a problem in creating a user, that user entry will contain an &#x60;errorDetails&#x60; property that describes what went wrong.  &#x60;&#x60;&#x60;json {   \&quot;newUsers\&quot;: [     {       \&quot;userId\&quot;: \&quot;18f3be12-xxxx-xxxx-xxxx-883d8f9b8ade\&quot;,       \&quot;uri\&quot;: \&quot;/users/18f3be12-xxxx-xxxx-xxxx-883d8f9b8ade\&quot;,       \&quot;email\&quot;: \&quot;claire@example.com\&quot;,       \&quot;userName\&quot;: \&quot;Claire Horace\&quot;,       \&quot;createdDateTime\&quot;: \&quot;0001-01-01T08:00:00.0000000Z\&quot;,       \&quot;errorDetails\&quot;: {         \&quot;errorCode\&quot;: \&quot;USER_ALREADY_EXISTS_IN_ACCOUNT\&quot;,         \&quot;message\&quot;: \&quot;Username and email combination already exists for this account.\&quot;       }     },     {       \&quot;userId\&quot;: \&quot;be9899a3-xxxx-xxxx-xxxx-2c8dd7156e33\&quot;,       \&quot;uri\&quot;: \&quot;/users/be9899a3-xxxx-xxxx-xxxx-2c8dd7156e33\&quot;,       \&quot;email\&quot;: \&quot;talmason@example.com\&quot;,       \&quot;userName\&quot;: \&quot;Tal Mason\&quot;,       \&quot;userStatus\&quot;: \&quot;ActivationSent\&quot;,       \&quot;createdDateTime\&quot;: \&quot;2020-05-26T23:25:30.7330000Z\&quot;     }   ] } &#x60;&#x60;&#x60;

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters
    - :new_users_definition (NewUsersDefinition):

  ## Returns

  {:ok, %DocuSign.Model.NewUsersSummary{}} on success
  {:error, info} on failure
  """
  @spec users_post_users(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.NewUsersSummary.t()} | {:error, Tesla.Env.t()}
  def users_post_users(connection, account_id, opts \\ []) do
    optional_params = %{
      :newUsersDefinition => :body
    }

    %{}
    |> method(:post)
    |> url("/v2.1/accounts/#{account_id}/users")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.NewUsersSummary{})
  end

  @doc """
  Changes one or more users in the specified account.
  This method updates the information about one or more account users.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters
    - :user_information_list (UserInformationList):

  ## Returns

  {:ok, %DocuSign.Model.UserInformationList{}} on success
  {:error, info} on failure
  """
  @spec users_put_users(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.UserInformationList.t()} | {:error, Tesla.Env.t()}
  def users_put_users(connection, account_id, opts \\ []) do
    optional_params = %{
      :userInformationList => :body
    }

    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/users")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.UserInformationList{})
  end
end
