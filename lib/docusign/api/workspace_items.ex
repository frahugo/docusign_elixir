# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.WorkspaceItems do
  @moduledoc """
  API calls for all endpoints tagged `WorkspaceItems`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Gets a workspace file
  This method returns a binary version of a file in a workspace.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - file_id (String.t): The id of the file.
  - folder_id (String.t): The id of the folder.
  - workspace_id (String.t): The id of the workspace.
  - opts (KeywordList): [optional] Optional parameters
    - :is_download (String.t): When set to **true**, the &#x60;Content-Disposition&#x60; header is set in the response. The value of the header provides the filename of the file. The default is **false**.
    - :pdf_version (String.t): When set to **true** the file is returned in PDF format.

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec workspace_file_get_workspace_file(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def workspace_file_get_workspace_file(
        connection,
        account_id,
        file_id,
        folder_id,
        workspace_id,
        opts \\ []
      ) do
    optional_params = %{
      :is_download => :query,
      :pdf_version => :query
    }

    %{}
    |> method(:get)
    |> url(
      "/v2.1/accounts/#{account_id}/workspaces/#{workspace_id}/folders/#{folder_id}/files/#{
        file_id
      }"
    )
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  List File Pages
  This method returns a workspace file as rasterized pages.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - file_id (String.t): The id of the file.
  - folder_id (String.t): The id of the folder.
  - workspace_id (String.t): The id of the workspace.
  - opts (KeywordList): [optional] Optional parameters
    - :count (String.t): The maximum number of results to be returned by this request.
    - :dpi (String.t): The number of dots per inch (DPI) for the resulting images. Valid values are 1-310 DPI. The default value is 94.
    - :max_height (String.t): Sets the maximum height of the returned images in pixels.
    - :max_width (String.t): Sets the maximum width of the returned images in pixels.
    - :start_position (String.t): The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image.

  ## Returns

  {:ok, %DocuSign.Model.PageImages{}} on success
  {:error, info} on failure
  """
  @spec workspace_file_pages_get_workspace_file_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.PageImages.t()} | {:error, Tesla.Env.t()}
  def workspace_file_pages_get_workspace_file_pages(
        connection,
        account_id,
        file_id,
        folder_id,
        workspace_id,
        opts \\ []
      ) do
    optional_params = %{
      :count => :query,
      :dpi => :query,
      :max_height => :query,
      :max_width => :query,
      :start_position => :query
    }

    %{}
    |> method(:get)
    |> url(
      "/v2.1/accounts/#{account_id}/workspaces/#{workspace_id}/folders/#{folder_id}/files/#{
        file_id
      }/pages"
    )
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.PageImages{})
  end

  @doc """
  Creates a workspace file.
  This method adds a file to a workspace.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - folder_id (String.t): The id of the folder.
  - workspace_id (String.t): The id of the workspace.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.WorkspaceItem{}} on success
  {:error, info} on failure
  """
  @spec workspace_file_post_workspace_files(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.WorkspaceItem.t()} | {:error, Tesla.Env.t()}
  def workspace_file_post_workspace_files(
        connection,
        account_id,
        folder_id,
        workspace_id,
        _opts \\ []
      ) do
    %{}
    |> method(:post)
    |> url("/v2.1/accounts/#{account_id}/workspaces/#{workspace_id}/folders/#{folder_id}/files")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.WorkspaceItem{})
  end

  @doc """
  Update workspace file or folder metadata
  This method updates the metadata for one or more specific files or folders in a workspace.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - file_id (String.t): The id of the file.
  - folder_id (String.t): The id of the folder.
  - workspace_id (String.t): The id of the workspace.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.WorkspaceItem{}} on success
  {:error, info} on failure
  """
  @spec workspace_file_put_workspace_file(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.WorkspaceItem.t()} | {:error, Tesla.Env.t()}
  def workspace_file_put_workspace_file(
        connection,
        account_id,
        file_id,
        folder_id,
        workspace_id,
        _opts \\ []
      ) do
    %{}
    |> method(:put)
    |> url(
      "/v2.1/accounts/#{account_id}/workspaces/#{workspace_id}/folders/#{folder_id}/files/#{
        file_id
      }"
    )
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.WorkspaceItem{})
  end

  @doc """
  Deletes files or sub-folders from a workspace.
  This method deletes one or more files or sub-folders from a workspace folder or root.  Note: To delete items from a workspace, the &#x60;status&#x60; of the workspace must be &#x60;active&#x60;.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - folder_id (String.t): The id of the folder.
  - workspace_id (String.t): The id of the workspace.
  - opts (KeywordList): [optional] Optional parameters
    - :workspace_item_list (WorkspaceItemList):

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec workspace_folder_delete_workspace_items(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def workspace_folder_delete_workspace_items(
        connection,
        account_id,
        folder_id,
        workspace_id,
        opts \\ []
      ) do
    optional_params = %{
      :workspaceItemList => :body
    }

    %{}
    |> method(:delete)
    |> url("/v2.1/accounts/#{account_id}/workspaces/#{workspace_id}/folders/#{folder_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  List workspace folder contents
  This method returns the contents of a workspace folder, which can include sub-folders and files.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - folder_id (String.t): The id of the folder.
  - workspace_id (String.t): The id of the workspace.
  - opts (KeywordList): [optional] Optional parameters
    - :count (String.t): The maximum number of results to be returned by this request.
    - :include_files (String.t): When set to **true**, the response includes file information (in addition to folder information). The default is **false**.
    - :include_sub_folders (String.t): When set to **true**, the response includes information about the sub-folders of the current folder. The default is **false**.
    - :include_thumbnails (String.t): When set to **true**, the response returns thumbnails.  The default is **false**.
    - :include_user_detail (String.t): When set to **true**, the response includes extended details about the user. The default is **false**.
    - :start_position (String.t): The position within the total result set from which to start returning values.
    - :workspace_user_id (String.t): If set, the response only includes results associated with the &#x60;userId&#x60; that you specify.

  ## Returns

  {:ok, %DocuSign.Model.WorkspaceFolderContents{}} on success
  {:error, info} on failure
  """
  @spec workspace_folder_get_workspace_folder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, DocuSign.Model.WorkspaceFolderContents.t()} | {:error, Tesla.Env.t()}
  def workspace_folder_get_workspace_folder(
        connection,
        account_id,
        folder_id,
        workspace_id,
        opts \\ []
      ) do
    optional_params = %{
      :count => :query,
      :include_files => :query,
      :include_sub_folders => :query,
      :include_thumbnails => :query,
      :include_user_detail => :query,
      :start_position => :query,
      :workspace_user_id => :query
    }

    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/workspaces/#{workspace_id}/folders/#{folder_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.WorkspaceFolderContents{})
  end
end
