# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Api.Workspaces do
  @moduledoc """
  API calls for all endpoints tagged `Workspaces`.
  """

  alias DocuSign.Connection
  import DocuSign.RequestBuilder

  @doc """
  Delete Workspace
  Deletes an existing workspace (logically).

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - workspace_id (String.t): The id of the workspace.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.Workspace{}} on success
  {:error, info} on failure
  """
  @spec workspace_delete_workspace(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.Workspace.t()} | {:error, Tesla.Env.t()}
  def workspace_delete_workspace(connection, account_id, workspace_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/v2.1/accounts/#{account_id}/workspaces/#{workspace_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.Workspace{})
  end

  @doc """
  Get Workspace
  Retrives properties about a workspace given a unique workspaceId.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - workspace_id (String.t): The id of the workspace.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.Workspace{}} on success
  {:error, info} on failure
  """
  @spec workspace_get_workspace(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.Workspace.t()} | {:error, Tesla.Env.t()}
  def workspace_get_workspace(connection, account_id, workspace_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/workspaces/#{workspace_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.Workspace{})
  end

  @doc """
  List Workspaces
  Gets information about the Workspaces that have been created.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %DocuSign.Model.WorkspaceList{}} on success
  {:error, info} on failure
  """
  @spec workspace_get_workspaces(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.WorkspaceList.t()} | {:error, Tesla.Env.t()}
  def workspace_get_workspaces(connection, account_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v2.1/accounts/#{account_id}/workspaces")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.WorkspaceList{})
  end

  @doc """
  Create a Workspace
  This method creates a new workspace.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - opts (KeywordList): [optional] Optional parameters
    - :workspace (Workspace):

  ## Returns

  {:ok, %DocuSign.Model.Workspace{}} on success
  {:error, info} on failure
  """
  @spec workspace_post_workspace(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.Workspace.t()} | {:error, Tesla.Env.t()}
  def workspace_post_workspace(connection, account_id, opts \\ []) do
    optional_params = %{
      :workspace => :body
    }

    %{}
    |> method(:post)
    |> url("/v2.1/accounts/#{account_id}/workspaces")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.Workspace{})
  end

  @doc """
  Update Workspace
  Updates information about a specific workspace.

  ## Parameters

  - connection (DocuSign.Connection): Connection to server
  - account_id (String.t): The external account number (int) or account ID GUID.
  - workspace_id (String.t): The id of the workspace.
  - opts (KeywordList): [optional] Optional parameters
    - :workspace (Workspace):

  ## Returns

  {:ok, %DocuSign.Model.Workspace{}} on success
  {:error, info} on failure
  """
  @spec workspace_put_workspace(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, DocuSign.Model.Workspace.t()} | {:error, Tesla.Env.t()}
  def workspace_put_workspace(connection, account_id, workspace_id, opts \\ []) do
    optional_params = %{
      :workspace => :body
    }

    %{}
    |> method(:put)
    |> url("/v2.1/accounts/#{account_id}/workspaces/#{workspace_id}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%DocuSign.Model.Workspace{})
  end
end
