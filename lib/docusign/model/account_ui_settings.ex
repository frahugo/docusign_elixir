# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Model.AccountUiSettings do
  @moduledoc """
  An object that defines the options that are available to non-administrators in the UI.
  """

  @derive [Poison.Encoder]
  defstruct [
    :adminMessage,
    :askAnAdmin,
    :enableAdminMessage,
    :enableAdminMessageMetadata,
    :enableAdvancedPaymentsReactEdit,
    :enableEasySignCanUseMultiTemplateApply,
    :enableEasySignCanUseMultiTemplateApplyMetadata,
    :enableEasySignTemplateUpload,
    :enableEasySignTemplateUploadMetadata,
    :enableEnvelopeCopyWithData,
    :enableEnvelopeCopyWithDataMetadata,
    :enableLegacyHomepageLink,
    :enableLegacyHomepageLinkMetadata,
    :hideSendAnEnvelope,
    :hideSendAnEnvelopeMetadata,
    :hideUseATemplate,
    :hideUseATemplateInPrepare,
    :hideUseATemplateInPrepareMetadata,
    :hideUseATemplateMetadata,
    :orderBasedRecipientIdGeneration,
    :orderBasedRecipientIdGenerationMetadata,
    :removeEnvelopeForwarding,
    :removeEnvelopeForwardingMetadata,
    :shouldRedactAccessCode,
    :shouldRedactAccessCodeMetadata,
    :uploadNewImageToSignOrInitial,
    :uploadNewImageToSignOrInitialMetadata
  ]

  @type t :: %__MODULE__{
          :adminMessage => AdminMessage,
          :askAnAdmin => AskAnAdmin,
          :enableAdminMessage => String.t(),
          :enableAdminMessageMetadata => SettingsMetadata,
          :enableAdvancedPaymentsReactEdit => String.t(),
          :enableEasySignCanUseMultiTemplateApply => String.t(),
          :enableEasySignCanUseMultiTemplateApplyMetadata => SettingsMetadata,
          :enableEasySignTemplateUpload => String.t(),
          :enableEasySignTemplateUploadMetadata => SettingsMetadata,
          :enableEnvelopeCopyWithData => String.t(),
          :enableEnvelopeCopyWithDataMetadata => SettingsMetadata,
          :enableLegacyHomepageLink => String.t(),
          :enableLegacyHomepageLinkMetadata => SettingsMetadata,
          :hideSendAnEnvelope => String.t(),
          :hideSendAnEnvelopeMetadata => SettingsMetadata,
          :hideUseATemplate => String.t(),
          :hideUseATemplateInPrepare => String.t(),
          :hideUseATemplateInPrepareMetadata => SettingsMetadata,
          :hideUseATemplateMetadata => SettingsMetadata,
          :orderBasedRecipientIdGeneration => String.t(),
          :orderBasedRecipientIdGenerationMetadata => SettingsMetadata,
          :removeEnvelopeForwarding => String.t(),
          :removeEnvelopeForwardingMetadata => SettingsMetadata,
          :shouldRedactAccessCode => String.t(),
          :shouldRedactAccessCodeMetadata => SettingsMetadata,
          :uploadNewImageToSignOrInitial => String.t(),
          :uploadNewImageToSignOrInitialMetadata => SettingsMetadata
        }
end

defimpl Poison.Decoder, for: DocuSign.Model.AccountUiSettings do
  import DocuSign.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:adminMessage, :struct, DocuSign.Model.AdminMessage, options)
    |> deserialize(:askAnAdmin, :struct, DocuSign.Model.AskAnAdmin, options)
    |> deserialize(
      :enableAdminMessageMetadata,
      :struct,
      DocuSign.Model.SettingsMetadata,
      options
    )
    |> deserialize(
      :enableEasySignCanUseMultiTemplateApplyMetadata,
      :struct,
      DocuSign.Model.SettingsMetadata,
      options
    )
    |> deserialize(
      :enableEasySignTemplateUploadMetadata,
      :struct,
      DocuSign.Model.SettingsMetadata,
      options
    )
    |> deserialize(
      :enableEnvelopeCopyWithDataMetadata,
      :struct,
      DocuSign.Model.SettingsMetadata,
      options
    )
    |> deserialize(
      :enableLegacyHomepageLinkMetadata,
      :struct,
      DocuSign.Model.SettingsMetadata,
      options
    )
    |> deserialize(
      :hideSendAnEnvelopeMetadata,
      :struct,
      DocuSign.Model.SettingsMetadata,
      options
    )
    |> deserialize(
      :hideUseATemplateInPrepareMetadata,
      :struct,
      DocuSign.Model.SettingsMetadata,
      options
    )
    |> deserialize(
      :hideUseATemplateMetadata,
      :struct,
      DocuSign.Model.SettingsMetadata,
      options
    )
    |> deserialize(
      :orderBasedRecipientIdGenerationMetadata,
      :struct,
      DocuSign.Model.SettingsMetadata,
      options
    )
    |> deserialize(
      :removeEnvelopeForwardingMetadata,
      :struct,
      DocuSign.Model.SettingsMetadata,
      options
    )
    |> deserialize(
      :shouldRedactAccessCodeMetadata,
      :struct,
      DocuSign.Model.SettingsMetadata,
      options
    )
    |> deserialize(
      :uploadNewImageToSignOrInitialMetadata,
      :struct,
      DocuSign.Model.SettingsMetadata,
      options
    )
  end
end
