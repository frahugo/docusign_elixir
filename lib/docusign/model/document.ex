# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Model.Document do
  @moduledoc """
  A document object.
  """

  @derive [Poison.Encoder]
  defstruct [
    :applyAnchorTabs,
    :assignTabsToRecipientId,
    :display,
    :documentBase64,
    :documentFields,
    :documentId,
    :encryptedWithKeyManager,
    :fileExtension,
    :fileFormatHint,
    :htmlDefinition,
    :includeInDownload,
    :matchBoxes,
    :name,
    :order,
    :pages,
    :password,
    :pdfFormFieldOption,
    :remoteUrl,
    :signerMustAcknowledge,
    :signerMustAcknowledgeUseAccountDefault,
    :tabs,
    :templateLocked,
    :templateRequired,
    :transformPdfFields,
    :uri
  ]

  @type t :: %__MODULE__{
          :applyAnchorTabs => String.t(),
          :assignTabsToRecipientId => String.t(),
          :display => String.t(),
          :documentBase64 => String.t(),
          :documentFields => [NameValue],
          :documentId => String.t(),
          :encryptedWithKeyManager => String.t(),
          :fileExtension => String.t(),
          :fileFormatHint => String.t(),
          :htmlDefinition => DocumentHtmlDefinition,
          :includeInDownload => String.t(),
          :matchBoxes => [MatchBox],
          :name => String.t(),
          :order => String.t(),
          :pages => String.t(),
          :password => String.t(),
          :pdfFormFieldOption => String.t(),
          :remoteUrl => String.t(),
          :signerMustAcknowledge => String.t(),
          :signerMustAcknowledgeUseAccountDefault => boolean(),
          :tabs => EnvelopeRecipientTabs,
          :templateLocked => String.t(),
          :templateRequired => String.t(),
          :transformPdfFields => String.t(),
          :uri => String.t()
        }
end

defimpl Poison.Decoder, for: DocuSign.Model.Document do
  import DocuSign.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:documentFields, :list, DocuSign.Model.NameValue, options)
    |> deserialize(
      :htmlDefinition,
      :struct,
      DocuSign.Model.DocumentHtmlDefinition,
      options
    )
    |> deserialize(:matchBoxes, :list, DocuSign.Model.MatchBox, options)
    |> deserialize(:tabs, :struct, DocuSign.Model.EnvelopeRecipientTabs, options)
  end
end
