# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Model.EnvelopeTemplate do
  @moduledoc """

  """

  @derive [Poison.Encoder]
  defstruct [
    :accessControlListBase64,
    :allowComments,
    :allowMarkup,
    :allowReassign,
    :allowViewHistory,
    :anySigner,
    :asynchronous,
    :attachmentsUri,
    :authoritativeCopy,
    :authoritativeCopyDefault,
    :autoMatch,
    :autoMatchSpecifiedByUser,
    :autoNavigation,
    :brandId,
    :brandLock,
    :certificateUri,
    :completedDateTime,
    :copyRecipientData,
    :created,
    :createdDateTime,
    :customFields,
    :customFieldsUri,
    :declinedDateTime,
    :deletedDateTime,
    :deliveredDateTime,
    :description,
    :disableResponsiveDocument,
    :documents,
    :documentsCombinedUri,
    :documentsUri,
    :emailBlurb,
    :emailSettings,
    :emailSubject,
    :enableWetSign,
    :enforceSignerVisibility,
    :envelopeAttachments,
    :envelopeDocuments,
    :envelopeId,
    :envelopeIdStamping,
    :envelopeLocation,
    :envelopeMetadata,
    :envelopeUri,
    :expireAfter,
    :expireDateTime,
    :expireEnabled,
    :externalEnvelopeId,
    :favoritedByMe,
    :folderId,
    :folderIds,
    :folderName,
    :folders,
    :hasComments,
    :hasFormDataChanged,
    :hasWavFile,
    :holder,
    :initialSentDateTime,
    :is21CFRPart11,
    :isDynamicEnvelope,
    :isSignatureProviderEnvelope,
    :lastModified,
    :lastModifiedBy,
    :lastModifiedDateTime,
    :lastUsed,
    :location,
    :lockInformation,
    :messageLock,
    :name,
    :newPassword,
    :notification,
    :notificationUri,
    :owner,
    :pageCount,
    :password,
    :passwordProtected,
    :powerForm,
    :powerForms,
    :purgeCompletedDate,
    :purgeRequestDate,
    :purgeState,
    :recipients,
    :recipientsLock,
    :recipientsUri,
    :sender,
    :sentDateTime,
    :shared,
    :signerCanSignOnMobile,
    :signingLocation,
    :status,
    :statusChangedDateTime,
    :statusDateTime,
    :templateId,
    :templatesUri,
    :transactionId,
    :uri,
    :useDisclosure,
    :voidedDateTime,
    :voidedReason,
    :workflow
  ]

  @type t :: %__MODULE__{
          :accessControlListBase64 => String.t(),
          :allowComments => String.t(),
          :allowMarkup => String.t(),
          :allowReassign => String.t(),
          :allowViewHistory => String.t(),
          :anySigner => String.t(),
          :asynchronous => String.t(),
          :attachmentsUri => String.t(),
          :authoritativeCopy => String.t(),
          :authoritativeCopyDefault => String.t(),
          :autoMatch => String.t(),
          :autoMatchSpecifiedByUser => String.t(),
          :autoNavigation => String.t(),
          :brandId => String.t(),
          :brandLock => String.t(),
          :certificateUri => String.t(),
          :completedDateTime => String.t(),
          :copyRecipientData => String.t(),
          :created => String.t(),
          :createdDateTime => String.t(),
          :customFields => AccountCustomFields,
          :customFieldsUri => String.t(),
          :declinedDateTime => String.t(),
          :deletedDateTime => String.t(),
          :deliveredDateTime => String.t(),
          :description => String.t(),
          :disableResponsiveDocument => String.t(),
          :documents => [Document],
          :documentsCombinedUri => String.t(),
          :documentsUri => String.t(),
          :emailBlurb => String.t(),
          :emailSettings => EmailSettings,
          :emailSubject => String.t(),
          :enableWetSign => String.t(),
          :enforceSignerVisibility => String.t(),
          :envelopeAttachments => [Attachment],
          :envelopeDocuments => [EnvelopeDocument],
          :envelopeId => String.t(),
          :envelopeIdStamping => String.t(),
          :envelopeLocation => String.t(),
          :envelopeMetadata => EnvelopeMetadata,
          :envelopeUri => String.t(),
          :expireAfter => String.t(),
          :expireDateTime => String.t(),
          :expireEnabled => String.t(),
          :externalEnvelopeId => String.t(),
          :favoritedByMe => String.t(),
          :folderId => String.t(),
          :folderIds => [String.t()],
          :folderName => String.t(),
          :folders => [Folder],
          :hasComments => String.t(),
          :hasFormDataChanged => String.t(),
          :hasWavFile => String.t(),
          :holder => String.t(),
          :initialSentDateTime => String.t(),
          :is21CFRPart11 => String.t(),
          :isDynamicEnvelope => String.t(),
          :isSignatureProviderEnvelope => String.t(),
          :lastModified => String.t(),
          :lastModifiedBy => UserInfo,
          :lastModifiedDateTime => String.t(),
          :lastUsed => String.t(),
          :location => String.t(),
          :lockInformation => EnvelopeLocks,
          :messageLock => String.t(),
          :name => String.t(),
          :newPassword => String.t(),
          :notification => Notification,
          :notificationUri => String.t(),
          :owner => UserInfo,
          :pageCount => String.t(),
          :password => String.t(),
          :passwordProtected => String.t(),
          :powerForm => PowerForm,
          :powerForms => [PowerForm],
          :purgeCompletedDate => String.t(),
          :purgeRequestDate => String.t(),
          :purgeState => String.t(),
          :recipients => EnvelopeRecipients,
          :recipientsLock => String.t(),
          :recipientsUri => String.t(),
          :sender => UserInfo,
          :sentDateTime => String.t(),
          :shared => String.t(),
          :signerCanSignOnMobile => String.t(),
          :signingLocation => String.t(),
          :status => String.t(),
          :statusChangedDateTime => String.t(),
          :statusDateTime => String.t(),
          :templateId => String.t(),
          :templatesUri => String.t(),
          :transactionId => String.t(),
          :uri => String.t(),
          :useDisclosure => String.t(),
          :voidedDateTime => String.t(),
          :voidedReason => String.t(),
          :workflow => Workflow
        }
end

defimpl Poison.Decoder, for: DocuSign.Model.EnvelopeTemplate do
  import DocuSign.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:customFields, :struct, DocuSign.Model.AccountCustomFields, options)
    |> deserialize(:documents, :list, DocuSign.Model.Document, options)
    |> deserialize(:emailSettings, :struct, DocuSign.Model.EmailSettings, options)
    |> deserialize(:envelopeAttachments, :list, DocuSign.Model.Attachment, options)
    |> deserialize(:envelopeDocuments, :list, DocuSign.Model.EnvelopeDocument, options)
    |> deserialize(:envelopeMetadata, :struct, DocuSign.Model.EnvelopeMetadata, options)
    |> deserialize(:folders, :list, DocuSign.Model.Folder, options)
    |> deserialize(:lastModifiedBy, :struct, DocuSign.Model.UserInfo, options)
    |> deserialize(:lockInformation, :struct, DocuSign.Model.EnvelopeLocks, options)
    |> deserialize(:notification, :struct, DocuSign.Model.Notification, options)
    |> deserialize(:owner, :struct, DocuSign.Model.UserInfo, options)
    |> deserialize(:powerForm, :struct, DocuSign.Model.PowerForm, options)
    |> deserialize(:powerForms, :list, DocuSign.Model.PowerForm, options)
    |> deserialize(:recipients, :struct, DocuSign.Model.EnvelopeRecipients, options)
    |> deserialize(:sender, :struct, DocuSign.Model.UserInfo, options)
    |> deserialize(:workflow, :struct, DocuSign.Model.Workflow, options)
  end
end
