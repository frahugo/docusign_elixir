# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule DocuSign.Model.ReportInProductGet do
  @moduledoc """

  """

  @derive [Poison.Encoder]
  defstruct [
    :customFieldFilter,
    :dateRangeCustomFromDate,
    :dateRangeCustomToDate,
    :dateRangeFilter,
    :displayOrder,
    :envelopeDateTypeFilter,
    :envelopeRecipientNameContainsFilter,
    :envelopeStatusFilter,
    :envelopeSubjectContainsFilter,
    :fields,
    :lastScheduledExecutionDate,
    :lastScheduledExecutionSuccessDate,
    :maxDownloadRows,
    :maxGridRows,
    :maxScheduledRows,
    :periodLengthFilter,
    :reportCustomizedId,
    :reportDescription,
    :reportId,
    :reportName,
    :reportType,
    :runUri,
    :saveUri,
    :scheduleId,
    :sentByDetails,
    :sentByFilter,
    :sentByIds,
    :sortFieldDirection,
    :sortFieldName
  ]

  @type t :: %__MODULE__{
          :customFieldFilter => String.t(),
          :dateRangeCustomFromDate => String.t(),
          :dateRangeCustomToDate => String.t(),
          :dateRangeFilter => String.t(),
          :displayOrder => String.t(),
          :envelopeDateTypeFilter => String.t(),
          :envelopeRecipientNameContainsFilter => String.t(),
          :envelopeStatusFilter => String.t(),
          :envelopeSubjectContainsFilter => String.t(),
          :fields => [ReportInProductField],
          :lastScheduledExecutionDate => String.t(),
          :lastScheduledExecutionSuccessDate => String.t(),
          :maxDownloadRows => String.t(),
          :maxGridRows => String.t(),
          :maxScheduledRows => String.t(),
          :periodLengthFilter => String.t(),
          :reportCustomizedId => String.t(),
          :reportDescription => String.t(),
          :reportId => String.t(),
          :reportName => String.t(),
          :reportType => String.t(),
          :runUri => String.t(),
          :saveUri => String.t(),
          :scheduleId => String.t(),
          :sentByDetails => ReportInProductSentByDetails,
          :sentByFilter => String.t(),
          :sentByIds => String.t(),
          :sortFieldDirection => String.t(),
          :sortFieldName => String.t()
        }
end

defimpl Poison.Decoder, for: DocuSign.Model.ReportInProductGet do
  import DocuSign.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:fields, :list, DocuSign.Model.ReportInProductField, options)
    |> deserialize(
      :sentByDetails,
      :struct,
      DocuSign.Model.ReportInProductSentByDetails,
      options
    )
  end
end
